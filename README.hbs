# Sockhop

<p align="center">
	<img src="https://raw.githubusercontent.com/DaxBot/sockhop/master/assets/sockhop_365px.png">
	<p align="center">Node.js IPC</p>
</p>

- Object centric - put a string, object, Widget, whatever into one end and it comes out the other
- Pass objects directly between different node programs
- Uses TCP sockets or Unix domain sockets transparent to you
- Easy wrappers over the tricky parts of net.socket
- Auto reconnect  
- Ping with auto disconnect/reconnect
- Remote callbacks across socket
- Manages binary buffers across the wire, reconstructs fragmented JSON buffers (see lib/ObjectBuffer.js)
- Server options for talking to (non Sockhop) other clients

## Example
```javascript
	const Sockhop=require("sockhop");

	// Server
	let s=new Sockhop.server();		// You can specify a socket location, IP address, etc. or it will pick defaults


	// Client
	let c=new Sockhop.client();


	class Widget {

		/* ... */
	}

	s.listen()
	.then(()=>c.connect())
	.then(()=>{

		// Send a number
		s.sendall(6);

		// Send everyone a Widget
		s.sendall(new Widget());

		// Send everyone a generic object
		s.sendall({
			"name" : "Joe",
			"age"  : 105
		});

	});


	c.on("receive", (obj, metadata)=>console.log("I got a "+metadata.type));	// "I got a Widget" etc



```

Remote callback example:
```javascript


	server.on("receive", (obj, meta)=>{

		// obj=="Promise to call when you get this"
		meta.callback("I got your message!");
	});

	c.send("Promise to call when you get this", (reply)=>{

		// reply == "I got your message!"
	});
```


## Linting, building docs, and testing
```sh
gulp
mocha
```

## Notes
Sockhop easily passes objects across the wire.  If you pack/transcode JS in a way that mutates class names, this functionality will be broken!  This includes auto ping functionality.

If you ```server.listen()```, make sure you ```server.close()``` when you are done so Node won't hang forever on program exit.  Similarly, if you turn on ```client.ping()``` or set ```client.auto_reconnect=true```, make sure you finish up by ```client.ping(0)``` (to disable pings) and ```client.auto_reconnect=false```.  Alternately you can ```client.disconnect()``` and it will turn off pings/auto_reconnect for you.

{{>main}}

## License
MIT